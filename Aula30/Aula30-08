p = c(1.2, 1.3, 1.4, 1.6, 1.6, 1.8, 1.9, 1.9, 2.2, 2.2, 2.6)
d = c(16, 12, 12, 14, 10, 14, 12, 9.9, 10, 7, 7.5)

plot(p, d, pch = 19)

### Modelo ###
m = lm(d~p); m
names(m)
m$coe[1]
m$coe[2]

ma = function(p){
  as.numeric(m$coe[1] + m$coe[2]*p)
}

ma(p)

### Reta Ajustada ###
abline(m, col = "blue", lwd = 2)

points(p, ma(p), col = "red")


### Coeficientes \hat(\beta_0) e \hat(\beta_1) ###


sx = sum(p)
sy = sum(d)
sxy = sum(p*d)
mx = mean(p)
my = mean(d)
sx2 = sum(p^2)
sy2 = sum(d^2)
sxx = sum((p-mx)^2)
syy = sum((d-my)^2)
sx.y = sum((p-mx)*(d-my)); sx.y

### Calculos na Mão ###

n = length(d); n

B1 = sx.y/sxx; B1

B0 = my - (B1*mx); B0

summary(m)

QMRes = sum((d-m$fit)^2)/(length(d)-2); QMRes

sigmaB0 = sqrt(QMRes*(1/length(d)+(mx^2)/sxx)); sigmaB0
sigmaB1 = sqrt(QMRes/sxx); sigmaB1

### Teste de Hipótese ###

t0B0 = m$coe[1]/sqrt(QMRes*((1/n) + (mx^2/sxx))); t0B0 
t0B1 = m$coe[2]/sqrt(QMRes/sxx); t0B1

### Variância ou Sigma^2 Estimado ###

sigma2est = QMRes
sigmaest = sqrt(QMRes)

### Continuando ###

SQReg = B1 * sx.y; SQReg 
SQRes = sum((d-m$fit)^2); SQRes
SQT = syy; SQT

F0 = SQReg/(SQRes/(n-2)); F0

R2 = SQReg/SQT; R2
R2ajust = R2 - (1 - R2)/(n-2); R2ajust 

QMReg = SQReg/1

### IMPORTANTE PARA O TRABALHO 1 ###

plot(m)

# Resíduo vs ajustado (variância constante), (e linearidade)
# Checa normalidade QQ- normalmente distribuídos
# Homocedasticidade - para variância
# Outliers

# Se é liear 1
# Testar para Checar normalidade

### Nível Descritivo ###

ndB0 = 2* min(pt(7.970, n-2), pt(7.970, n-2, low = F)); ndB0
ndB1 = 2* min(pt(-3.597, n-2), pt(-3.547, n-2, low = F)); ndB1

### Desvio Padrão Intercepto ###

dpB0 = sqrt(QMRes * (mx^2/sxx)); dpB0

### Estimativas Intervalares ###
confint(m)

anova(m)





